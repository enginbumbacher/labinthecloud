'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

define(function (require) {
  var DomView = require('core/view/dom_view'),
      Utils = require('core/util/utils'),
      d3 = require('d3'),
      Template = require('text!./componentspeedgraph.html');
  require('link!./componentspeedgraph.css');

  var componentMap = {
    x: {
      title: 'left/right',
      labels: ['right', 'left'],
      color: 'rgb(55,152,195)',
      right: { 'x1': 55, 'x2': 75, 'y1': 35, 'y2': 35, 'xlabel': 75, 'ylabel': 30 },
      left: { 'x1': 45, 'x2': 25, 'y1': 35, 'y2': 35, 'xlabel': 25, 'ylabel': 30 }
    },
    y: {
      title: 'up/down',
      labels: ['up', 'down'],
      color: 'rgb(55,143,48)',
      up: { 'x1': 50, 'x2': 50, 'y1': 30, 'y2': 10, 'xlabel': 40, 'ylabel': 15 },
      down: { 'x1': 50, 'x2': 50, 'y1': 40, 'y2': 60, 'xlabel': 35, 'ylabel': 55 }
    }
  };
  return function (_DomView) {
    _inherits(ComponentSpeedView, _DomView);

    function ComponentSpeedView(model, tmpl) {
      _classCallCheck(this, ComponentSpeedView);

      var _this = _possibleConstructorReturn(this, (ComponentSpeedView.__proto__ || Object.getPrototypeOf(ComponentSpeedView)).call(this, tmpl || Template));

      Utils.bindMethods(_this, ['_onModelChange']);

      model.addEventListener('Model.Change', _this._onModelChange);

      if (model.get('mode') == "component") {
        _this.svgs = {
          x: null,
          y: null
        };
      } else {
        _this.svgs = {
          total: null
        };
      }
      for (var key in _this.svgs) {
        var _svg = d3.select(_this.$el.find('.component-speed__graph').get(0)).append('svg');
        _svg.classed('component-speed__graph__' + key, true);
        _svg.attr('width', model.get('width') + model.get('margins.left') + model.get('margins.right'));
        _svg.attr('height', model.get('height') + model.get('margins.top') + model.get('margins.bottom'));
        _this.svgs[key] = _svg.append('g').attr('transform', 'translate(' + model.get('margins.left') + ', ' + model.get('margins.top') + ')');
      }
      _this.scales = {};
      _this.scales.x = d3.scaleLinear().range([0, model.get('width')]);
      _this.scales.y = d3.scaleLinear().range([model.get('height'), 0]);

      var svg = d3.select(_this.$el.find('.component-speed__graph__image').get(0)).append('svg');
      svg.attr('width', 100).attr('height', 70);

      // Draw visualization to illustrate the meaning
      svg.append('ellipse').attr("cx", 0).attr("cy", 0).attr("rx", 16).attr("ry", 8).attr('transform', 'translate(50,35)rotate(-45)').attr('fill', 'black');

      for (var _key in _this.svgs) {
        svg.append("svg:defs").append("svg:marker").attr("id", 'arrow__image__' + _key).attr("refX", 0).attr("refY", 2).attr("markerWidth", 4).attr("markerHeight", 4).attr("orient", "auto").append("svg:path").attr("d", "M0,0 L0,4 L4,2 z").style('fill', componentMap[_key].color);

        svg.append("line").attr("x1", componentMap[_key][componentMap[_key].labels[0]].x1).attr("y1", componentMap[_key][componentMap[_key].labels[0]].y1).attr("x2", componentMap[_key][componentMap[_key].labels[0]].x2).attr("y2", componentMap[_key][componentMap[_key].labels[0]].y2).attr("stroke", componentMap[_key].color).attr("stroke-width", 2).attr("marker-end", 'url(#arrow__image__' + _key);

        svg.append("line").attr("x1", componentMap[_key][componentMap[_key].labels[1]].x1).attr("y1", componentMap[_key][componentMap[_key].labels[1]].y1).attr("x2", componentMap[_key][componentMap[_key].labels[1]].x2).attr("y2", componentMap[_key][componentMap[_key].labels[1]].y2).attr("stroke", componentMap[_key].color).attr("stroke-width", 2).attr("marker-end", 'url(#arrow__image__' + _key);

        svg.append('text').attr('class', 'component-speed__graph__image__label').text(componentMap[_key].labels[0]).style('fill', componentMap[_key].color).attr('y', componentMap[_key][componentMap[_key].labels[0]].ylabel).attr('x', componentMap[_key][componentMap[_key].labels[0]].xlabel);

        svg.append('text').attr('class', 'component-speed__graph__image__label').text(componentMap[_key].labels[1]).style('fill', componentMap[_key].color).attr('y', componentMap[_key][componentMap[_key].labels[1]].ylabel).attr('x', componentMap[_key][componentMap[_key].labels[1]].xlabel);
      }

      return _this;
    }

    _createClass(ComponentSpeedView, [{
      key: '_onModelChange',
      value: function _onModelChange(evt) {
        switch (evt.data.path) {
          case "data":
            if (evt.data.value) {
              this.reset();
              this.setup(evt.currentTarget);
            } else {
              this.reset();
            }
            break;
        }
      }
    }, {
      key: 'setup',
      value: function setup(model) {
        var _this2 = this;

        this.scales.x.domain([0, Object.values(model.get('data')).reduce(function (acc, val) {
          return Math.max(acc, val.runTime);
        }, 0)]);

        var maxValue = Object.values(model.get('data')).reduce(function (acc, val) {
          return Math.max(acc, val.maxValue);
        }, 0);
        this.scales.y.domain([model.get('mode') == 'component' ? -maxValue : 0, maxValue]);
        this.axes = {
          x: d3.axisBottom().scale(this.scales.x),
          y: d3.axisLeft().scale(this.scales.y).tickSize(0, 0)
        };
        this.bgs = {};
        for (var key in this.svgs) {
          this.svgs[key].selectAll('*').remove();

          this.svgs[key].select('.component-speed__graph__axis').remove();
          this.svgs[key].append('g').attr('class', 'component-speed__graph__axis component-speed__graph__axis-x').attr('transform', 'translate(0, ' + model.get('height') / 2 + ')').call(this.axes.x);
          this.svgs[key].selectAll("text").remove();

          this.svgs[key].append('g').attr('class', 'component-speed__graph__axis component-speed__graph__axis-x').attr('transform', 'translate(0, ' + model.get('height') + ')').call(this.axes.x).append('text').attr('class', 'component-speed__graph__axis-label').text('Time [seconds]').attr('x', model.get('width') / 2).attr('y', 30);

          this.svgs[key].append('g').attr('class', 'component-speed__graph__axis component-speed__graph__axis-y').call(this.axes.y);
          this.svgs[key].selectAll(".component-speed__graph__axis-y .domain").attr("stroke", 0);

          // this.svgs[key].append('g')
          //   .append('text')
          //     .attr('class', 'component-speed__graph__axis-label')
          //     .text(`Speed [micrometers / second]`)
          //     .attr('transform', 'rotate(-90)')
          //     .attr('y', -20)
          //     .attr('x', -model.get('height') / 2);

          this.svgs[key].append("svg:defs").append("svg:marker").attr("id", 'arrow__' + key).attr("refX", 0).attr("refY", 4).attr("markerWidth", 8).attr("markerHeight", 8).attr("orient", "auto").append("svg:path").attr("d", "M0,0 L0,8 L8,4 z").style('fill', componentMap[key].color);

          this.svgs[key].append("line").attr('class', 'component-speed__graph__arrow-line-' + componentMap[key].labels[0]).attr("x1", -5).attr("y1", model.get('height') / 2 - 5).attr("x2", -5).attr("y2", 5).attr("stroke", componentMap[key].color).attr("stroke-width", 2).attr("marker-end", 'url(#arrow__' + key);

          this.svgs[key].append('g').append('text').attr('class', 'component-speed__graph__arrow-label').text('Speed ' + componentMap[key].labels[0]).attr('transform', 'rotate(-90)').style('fill', componentMap[key].color).attr('y', -10).attr('x', -model.get('height') / 4);

          this.svgs[key].append("line").attr('class', 'component-speed__graph__arrow-line-' + componentMap[key].labels[1]).attr("x1", -5).attr("y1", model.get('height') / 2 + 5).attr("x2", -5).attr("y2", model.get('height') - 5).attr("stroke", componentMap[key].color).attr("stroke-width", 2).attr("marker-end", 'url(#arrow__' + key + ')');

          this.svgs[key].append('g').append('text').attr('class', 'component-speed__graph__arrow-label').text('Speed ' + componentMap[key].labels[1]).attr('transform', 'rotate(-90)').style('fill', componentMap[key].color).attr('y', -10).attr('x', -3 * model.get('height') / 4);

          this.svgs[key].append('g').append('text').attr('class', 'component-speed__graph__title').text('Average speed in ' + componentMap[key].title + ' direction ').attr('y', -10).attr('x', model.get('width') / 2);

          this.bgs[key] = this.svgs[key].append('g').attr('class', 'component-speed__graph__background');

          for (var layer in model.get('data')) {
            if (!model.get('data.' + layer + '.showLayer')) {
              continue;
            }
            var graphdata = model.get('data.' + layer + '.graphs.' + key).filter(function (item) {
              return item.mean;
            });
            var color = model.get('data.' + layer + '.color');
            if (model.get('stdBand')) {
              var std = d3.area().x(function (d) {
                return _this2.scales.x(d.time);
              }).y0(function (d) {
                return _this2.scales.y(d.mean - d.s);
              }).y1(function (d) {
                return _this2.scales.y(d.mean + d.s);
              });
              this.svgs[key].append('path').datum(graphdata).attr('class', 'component-speed__graph__std component-speed__graph__std__' + layer).attr('style', color ? 'fill: #' + color.toString(16) : null).attr('d', std);
            }

            // Function to be used for plotting
            // It defines that it takes for each data point the time element and the mean and plots it in x,y.
            // .datum(graphdata): That's the data on which to apply the function.
            // .attr(): Characteristics of the svg.
            // .attr('d',line) is where the datum gets transformed into the line.
            var line = d3.line().x(function (d) {
              return _this2.scales.x(d.time);
            }).y(function (d) {
              return _this2.scales.y(d.mean);
            });
            this.svgs[key].append('path').datum(graphdata).attr('class', 'component-speed__graph__line component-speed__graph__line__' + layer).attr('style', color ? 'stroke: #' + color.toString(16) : null).attr('d', line);
          }

          // Draw the lines at the different time intervals.
          if (model.get('lightConfig')) {

            this.svgs[key].append("svg:defs").append("svg:marker").attr("id", 'arrow__component__light').attr("refX", 0).attr("refY", 2).attr("markerWidth", 4).attr("markerHeight", 4).attr("orient", "auto").append("svg:path").attr("d", "M0,0 L0,4 L4,2 z").style('fill', 'rgb(235,160,17)');

            var expDuration = model.get('lightConfig').reduce(function (acc, curr) {
              return Math.max(acc, curr.timeEnd);
            }, 0);

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = model.get('lightConfig')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var config = _step.value;

                if (config.timeStart != 0) {
                  this.svgs[key].append("line").attr('class', 'component-speed__graph__light-time').attr("x1", config.timeStart * model.get('width') / expDuration).attr("y1", model.get('height')).attr("x2", config.timeStart * model.get('width') / expDuration).attr("y2", 0).attr("stroke-width", 2);
                }
                if (config.lightDir[0] != 0 || config.lightDir[1] != 0) {
                  this.svgs[key].append("line").attr('class', 'component-speed__graph__light-arrow').attr("x1", (config.timeEnd + config.timeStart) / 2 * model.get('width') / expDuration + 20).attr("y1", 10).attr("x2", (config.timeEnd + config.timeStart) / 2 * model.get('width') / expDuration + 10 * config.lightDir[0] + 20).attr("y2", 10 + 10 * config.lightDir[1]).attr("stroke-width", 2).attr("marker-end", 'url(#arrow__component__light)');
                  //var lightValue = config.left!=0? config.left: (config.right!=0? config.right : (config.top!=0? : config.top : (config.bottom!=0? config.bottom : 0)));
                  var lightValue = Math.sqrt(Math.pow(config.left, 2) + Math.pow(config.right, 2) + Math.pow(config.top, 2) + Math.pow(config.bottom, 2));
                  lightValue = Math.round(lightValue);
                  this.svgs[key].append('g').append('text').attr('class', 'component-speed__graph__light-label').text(lightValue + '% in ').attr('y', 15).attr('x', (config.timeEnd + config.timeStart) / 2 * model.get('width') / expDuration - 20);
                } else if (config.left != 0 && config.right != 0 && config.top != 0 && config.bottom != 0) {
                  this.svgs[key].append('g').append('text').attr('class', 'component-speed__graph__light-label').text(config.left + '% from all dir.').attr('y', 15).attr('x', (config.timeEnd + config.timeStart) / 2 * model.get('width') / expDuration);
                } else if (config.left != 0 && config.right != 0 && config.top == 0 && config.bottom == 0) {
                  this.svgs[key].append('g').append('text').attr('class', 'component-speed__graph__light-label').text(config.left + '% from left&right').attr('y', 15).attr('x', (config.timeEnd + config.timeStart) / 2 * model.get('width') / expDuration);
                } else if (config.left == 0 && config.right == 0 && config.top != 0 && config.bottom != 0) {
                  this.svgs[key].append('g').append('text').attr('class', 'component-speed__graph__light-label').text(config.top + '% from top&bottom').attr('y', 15).attr('x', (config.timeEnd + config.timeStart) / 2 * model.get('width') / expDuration);
                } else {
                  this.svgs[key].append('g').append('text').attr('class', 'component-speed__graph__light-label').text("no light").attr('y', 15).attr('x', (config.timeEnd + config.timeStart) / 2 * model.get('width') / expDuration);
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
        }
      }
    }, {
      key: 'update',
      value: function update(timestamp, model) {
        var _this3 = this;

        var runtime = Object.values(model.get('data')).reduce(function (acc, val) {
          return Math.max(acc, val.runTime);
        }, 0);
        for (var key in this.svgs) {
          var timeband = this.bgs[key].selectAll('.component-speed__graph__time-band').data([timestamp]);
          timeband.enter().append('rect').attr('class', 'component-speed__graph__time-band').attr('y', 0).attr('height', model.get('height')).merge(timeband).transition().duration(0).attr('x', function (d) {
            return _this3.scales.x(Math.min(runtime, Math.max(0, d - model.get('dT') / 2)));
          }).attr('width', function (d) {
            return _this3.scales.x(model.get('dT') + Math.min(0, d - model.get('dT') / 2) + Math.min(0, runtime - d - model.get('dT') / 2));
          });
          timeband.exit().remove();
        }
      }
    }, {
      key: 'reset',
      value: function reset() {
        for (var key in this.svgs) {
          this.svgs[key].selectAll('.component-speed__graph__axis').remove();
          this.svgs[key].selectAll('.component-speed__graph__time-band').remove();
          this.svgs[key].selectAll('.component-speed__graph__std').remove();
          this.svgs[key].selectAll('.component-speed__graph__line').remove();
        }
      }
    }]);

    return ComponentSpeedView;
  }(DomView);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
